
assert  = require 'assert'
AuthLib = require '../index'

copy = (x) -> JSON.parse JSON.stringify x

UserCases =

    TestUserWithStringOrg:
        id:   'userId'
        org:  'userOrg'
        name: 'userName'
        role: 'userRole'

    TestUserWithArrayOrg:
        id:   'userId'
        org:  ['userOrg1', 'userOrg2']
        name: 'userName'
        role: 'userRole'

    TestUserWithStringArrayOrg:
        id:   'userId'
        org:  'userOrg1,userOrg2'
        name: 'userName'
        role: 'userRole'

runAuthLibAsToken = (user) ->
    token = do ->
        payload = {data:user}
        payload = (new Buffer JSON.stringify(payload)).toString('base64')
        return "X.#{payload}.X"
    headers = '42-auth-token':token
    return AuthLib.getUser({headers})

runAuthLibAsHeaders = (user) ->
    headers = Object.keys(user).reduce ((result, key) ->
        result["42-#{key}"] = user[key]
        return result
    ), {}
    return AuthLib.getUser({headers})

serializeUser = (user) ->
    user = copy(user)
    if Array.isArray(user.organizations)
        user.organizations.sort()
        user.organizations = user.organizations.toString()
    return JSON.stringify [user.id, user.organizations, user.name, user.role]

checkIfUsersAreEqual = (returned, expected) ->
    expected = copy(expected)
    expected.organizations = expected.org
    serializeUser(returned) is serializeUser(expected)

Object.keys(UserCases).forEach (key) ->
    user = runAuthLibAsToken(UserCases[key])
    assert checkIfUsersAreEqual(user, UserCases[key]), \
    """
    Token check for `#{key}` failed...

    Expected:
    #{JSON.stringify(UserCases[key])}

    Actual:
    #{JSON.stringify(user)}
    """
    user = runAuthLibAsHeaders(UserCases[key])
    assert checkIfUsersAreEqual(user, UserCases[key]), \
    """
    Header only check for `#{key}` failed...

    Expected:
    #{JSON.stringify(UserCases[key])}

    Actual:
    #{JSON.stringify(user)}
    """

console.log "Tests passed!"
