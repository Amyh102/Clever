roles  = require './roles'

AUTH_TOKEN_HEADER = "42-auth-token"
HEADER_PREFIX     = "42-"


parseTokenPayload = (token) ->
    payload = token.split('.')[1]
    throw new Error("Invalid JWT.") if not payload
    try
        data = JSON.parse (new Buffer payload, 'base64').toString()
        return data.data or data
    catch error
        throw new Error("Could not parse payload from JWT.")


module.exports =
    roles: roles

    # Parses out user info from an http request.
    # User object is constructed from headers:
    #
    # - 42-id
    # - 42-org
    # - 42-role
    # - 42-name
    #
    # Or from 42 auth token.
    getUser: (req) ->
        user = do ->
            dataFromToken = try parseTokenPayload(req.headers[AUTH_TOKEN_HEADER] or '')
            return dataFromToken if dataFromToken
            # This is deprecated
            keys = Object.keys(req.headers).filter (x) -> x.indexOf(HEADER_PREFIX) is 0
            return keys.reduce ((result, key) ->
                key = key.replace(HEADER_PREFIX, '')
                result[key] = req.headers["#{HEADER_PREFIX}#{key}"]
                return result
            ), {}
        user.organizations = user.org or ''
        user.organizations = user.organizations.toString() if (typeof user.organizations) is 'number'
        user.organizations = user.organizations.split(',') if (typeof user.organizations) is 'string'
        user.organizations = user.organizations.map (x) -> x.trim()
        delete user.org
        user.isRootAdmin = -> @role is roles.admin.root
        user.isOrgAdmin  = -> @role is roles.admin.org
        return user